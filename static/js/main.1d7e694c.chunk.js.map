{"version":3,"sources":["AsyncFetch.js","App.js","serviceWorker.js","index.js"],"names":["AsyncFetch","state","status","result","mounted","fetch","args","_this","setState","props","then","catch","e","message","clear","this","autoFetch","prevProps","render","Object","objectSpread","React","Component","defaultProps","augur","Augur","connectOptions","constants","augurNode","ethereumNode","http","ws","pollingIntervalMilliseconds","blockRetention","connectionTimeout","styles","theme","@global","body","backgroundColor","palette","common","white","appBar","position","toolbarTitle","flex","layout","defineProperty","width","marginLeft","spacing","marginRight","breakpoints","up","heroContent","maxWidth","margin","padding","concat","cardHeader","grey","cardPricing","display","justifyContent","alignItems","marginBottom","cardActions","paddingBottom","footer","marginTop","borderTop","divider","AugurApi","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","connected","connect","rpc","setDebugOptions","broadcast","tx","pify","_ref","console","log","getMarkets","query","markets","universe","contracts","Universe","search","marketIds","getMarketsInfo","Promise","resolve","getCategories","MarketsList","_ref2","react_default","a","createElement","src_AsyncFetch","_ref3","App_Markets","LinearProgress","style","TopCategories","_ref4","onCategoryClick","_ref5","topCategories","sort","sortCategories","reverse","Grid","container","paddingTop","slice","map","category","item","key","categoryName","Button","size","onClick","variant","Outcome","_ref6","price","border","fontSize","height","b","parseFloat","openInterest","MarketsSearch","_this2","onInputChange","onInputChangeDebounced","debounce","_this3","TextField","onChange","target","value","id","label","placeholder","helperText","defaultValue","fullWidth","InputLabelProps","shrink","App_AugurApi","_ref7","Fragment","App_TopCategories","App_MarketsList","MarketsContainer","styled","div","_templateObject","SimpleTable","_ref8","titles","rows","Table","TableHead","TableRow","title","TableCell","TableBody","row","join","cell","i","MarketDetails","_ref9","text","details","dangerouslySetInnerHTML","__html","linkifyUrls","replace","getMaxOutcome","outcomes","outcome","length","MarketStyle","withStyles","_ref10","classes","description","settlementFee","volume","marketType","endTime","reportingState","tags","Card","CardHeader","subheader","titleTypographyProps","subheaderTypographyProps","align","action","StarBorder_default","cursor","className","CardContent","App_Outcome","Typography","App_MarketDetails","App_SimpleTable","distanceInWordsStrict","Date","addSuffix","unit","CardActions","textAlign","Chip","icon","Close_default","justify","color","smallify","num","parseInt","MarketBet","_useState","useState","_useState2","slicedToArray","bet","setBet","payoutTrue","payoutFalse","direction","flexGrow","type","min","xs","Markets","_ref11","market","App_MarketBet","Layout","_ref12","children","CssBaseline","AppBar","Toolbar","noWrap","Hero","_ref13","component","gutterBottom","App_Layout","App_Hero","App_MarketsSearch","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d7e694c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass AsyncFetch extends React.Component {\n  state = {\n    status: \"idle\",\n    result: null\n  };\n\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.props.autoFetch) {\n      this.fetch();\n    }\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.fetch !== prevProps.fetch) {\n      this.fetch();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetch = args => {\n    this.setState(\n      {\n        status: \"loading\"\n      },\n      () => {\n        this.props\n          .fetch(args)\n          .then(result => {\n            this.mounted &&\n              this.setState({\n                status: \"success\",\n                result\n              });\n          })\n          .catch(e => {\n            this.mounted &&\n              this.setState({\n                status: \"error\",\n                result: e.message\n              });\n          });\n      }\n    );\n  };\n\n  clear = () => {\n    this.setState({\n      result: null\n    });\n  };\n\n  render() {\n    return this.props.render({\n      ...this.state,\n      fetch: this.fetch,\n      clear: this.clear\n    });\n  }\n}\n\nAsyncFetch.propTypes = {\n  autoFetch: PropTypes.bool,\n  // the fetch call function\n  fetch: PropTypes.func.isRequired,\n  render: PropTypes.func.isRequired\n};\n\nAsyncFetch.defaultProps = {\n  autoFetch: false\n};\n\nexport default AsyncFetch;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Paper from \"@material-ui/core/Paper\";\nimport StarIcon from \"@material-ui/icons/StarBorder\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { distanceInWordsStrict } from \"date-fns\";\nimport styled from \"styled-components\";\nimport Augur from \"augur.js\";\nimport debounce from \"lodash.debounce\";\nimport pify from \"pify\";\n\nimport linkifyUrls from \"linkify-urls\";\n\nimport AsyncFetch from \"./AsyncFetch\";\n\nexport const augur = new Augur();\nexport const { constants } = augur;\n\nconst connectOptions = {\n  augurNode: \"wss://augur-node.augur.casino\",\n  //wss://dev.augur.net/augur-node\", //wss://augur-node.augur.casino\",\n  ethereumNode: {\n    http:\n      \"https://eth-mainnet.alchemyapi.io/jsonrpc/7sE1TzCIRIQA3NJPD5wg7YRiVjhxuWAE\",\n    ws: \"\",\n    pollingIntervalMilliseconds: 10000,\n    blockRetention: 100,\n    connectionTimeout: 60000\n  }\n\n  /*{\n    http: \"https://rinkeby.infura.io/72b98520d10248d49ac6177895cc8b8b\"\n    //ws: \"wss://rinkeby.augur.net/ethereum-ws\",\n    //pollingIntervalMilliseconds: 10000,\n    //blockRetention: 100,\n    //connectionTimeout: 60000\n  }*/\n\n  // useWeb3Transport: true\n};\n\nconst styles = theme => ({\n  \"@global\": {\n    body: {\n      backgroundColor: theme.palette.common.white\n    }\n  },\n  appBar: {\n    position: \"relative\"\n  },\n  toolbarTitle: {\n    flex: 1\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    [theme.breakpoints.up(900 + theme.spacing(6))]: {\n      width: 900,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  heroContent: {\n    maxWidth: 600,\n    margin: \"0 auto\",\n    padding: `${theme.spacing(8)}px 0 ${theme.spacing(6)}px`\n  },\n  cardHeader: {\n    backgroundColor: theme.palette.grey[200]\n  },\n  cardPricing: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"baseline\",\n    marginBottom: theme.spacing(2)\n  },\n  cardActions: {\n    [theme.breakpoints.up(\"sm\")]: {\n      paddingBottom: theme.spacing(2)\n    }\n  },\n  footer: {\n    marginTop: theme.spacing(8),\n    borderTop: `1px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing(6)}px 0`\n  }\n});\n\n// wrapper for <AugurApi/> component\nclass AugurApi extends React.Component {\n  state = {\n    connected: false\n  };\n  constructor(connectOptions) {\n    super();\n    this.connectOptions = connectOptions;\n    this.augurNode = null;\n    this.ethereumNode = null;\n    this.connect();\n  }\n  connect = () => {\n    augur.rpc.setDebugOptions({ broadcast: true, connect: true, tx: true });\n    return pify(augur.connect)(connectOptions)\n      .then(({ augurNode, ethereumNode }) => {\n        //console.log(\"connected\", {augurNode, ethereumNode});\n        this.augurNode = augurNode;\n        this.ethereumNode = ethereumNode;\n        this.setState({\n          connected: true\n        });\n      })\n      .catch(console.log);\n  };\n  getMarkets = query =>\n    (this.ethereumNode &&\n      pify(augur.markets.getMarkets)({\n        universe: this.ethereumNode.contracts.Universe,\n        search: query\n      }).then(\n        marketIds =>\n          // get related infos\n          pify(augur.markets.getMarketsInfo)({\n            marketIds\n          }) //.then(res => console.log(\"getMarkets\", res) || res)\n      )) ||\n    Promise.resolve([]);\n\n  getCategories = () =>\n    (this.ethereumNode &&\n      pify(augur.markets.getCategories)({\n        universe: this.ethereumNode.contracts.Universe\n      })) ||\n    Promise.resolve([]);\n  render() {\n    return this.props.render({\n      connected: this.state.connected,\n      getMarkets: this.getMarkets,\n      getCategories: this.getCategories,\n      augurNode: this.augurNode,\n      ethereumNode: this.ethereumNode\n    });\n  }\n}\n\n// load and display markets list\nconst MarketsList = ({ query, getMarkets }) => (\n  <AsyncFetch\n    fetch={() => getMarkets(query)}\n    autoFetch={true}\n    render={({ status, result }) => {\n      if (status === \"success\") {\n        return <Markets markets={result} />;\n      } else if (status === \"loading\") {\n        return <LinearProgress style={{ marginTop: 50 }} />;\n      }\n      return null;\n    }}\n  />\n);\n\n// load and display top categories\nconst TopCategories = ({ getCategories, onCategoryClick }) => (\n  <AsyncFetch\n    fetch={getCategories}\n    autoFetch={true}\n    render={({ status, result }) => {\n      if (status === \"success\" && result) {\n        const topCategories = result.sort(sortCategories);\n        topCategories.reverse();\n        return (\n          <Grid container spacing={1} style={{ paddingTop: 20 }}>\n            {topCategories.slice(0, 16).map(category => (\n              <Grid item key={category.categoryName}>\n                <Button\n                  size=\"small\"\n                  onClick={() => onCategoryClick(category)}\n                  variant=\"outlined\"\n                >\n                  {category.categoryName}\n                </Button>\n              </Grid>\n            ))}\n          </Grid>\n        );\n      }\n      return null;\n    }}\n  />\n);\n\nconst OUTCOME_HEIGHT = 15;\n\nconst Outcome = ({ style, price }) => (\n  <div\n    style={{\n      border: \"1px solid silver\",\n      display: \"inline-block\",\n      fontSize: 0,\n      height: OUTCOME_HEIGHT,\n      width: \"100%\",\n      ...style\n    }}\n  >\n    <div\n      style={{\n        display: \"inline-block\",\n        height: \"100%\",\n        width: price * 100.0 + \"%\",\n        backgroundColor: \"#51c279\"\n      }}\n    />\n    <div\n      style={{\n        display: \"inline-block\",\n        height: \"100%\",\n        width: (1 - price) * 100.0 + \"%\",\n        backgroundColor: \"#c6655d\"\n      }}\n    />\n  </div>\n);\n\nconst sortCategories = (a, b) => {\n  if (parseFloat(a.openInterest) < parseFloat(b.openInterest)) {\n    return -1;\n  } else if (parseFloat(a.openInterest) > parseFloat(b.openInterest)) {\n    return 1;\n  }\n  return 0;\n};\n\n// manage state for load and query markets data\nclass MarketsSearch extends React.Component {\n  state = {\n    query: \"bug\"\n  };\n  onCategoryClick = category => {\n    this.setState({\n      query: `category: ${category.categoryName}`\n    });\n  };\n  onInputChange = query => {\n    console.log(query);\n    this.setState({\n      query\n    });\n  };\n  onInputChangeDebounced = debounce(this.onInputChange, 200);\n  render() {\n    return (\n      <div style={{ width: \"100%\" }}>\n        <TextField\n          onChange={e => this.onInputChangeDebounced(e.target.value)}\n          id=\"standard-full-width\"\n          label=\"Filter targets\"\n          style={{ margin: 8 }}\n          placeholder=\"Placeholder\"\n          helperText=\"ex: category: Ethereum OR tags: ETH\"\n          defaultValue={this.state.query}\n          fullWidth\n          margin=\"normal\"\n          InputLabelProps={{\n            shrink: true\n          }}\n        />\n        <AugurApi\n          render={({ connected, getMarkets, getCategories }) => {\n            if (connected) {\n              return (\n                <React.Fragment>\n                  <TopCategories\n                    getCategories={getCategories}\n                    onCategoryClick={this.onCategoryClick}\n                  />\n                  <MarketsList\n                    query={this.state.query}\n                    getMarkets={getMarkets}\n                  />\n                </React.Fragment>\n              );\n            }\n            return <LinearProgress style={{ marginTop: 50 }} />;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\n//const TopCategories = ({}) => ()\n\nconst MarketsContainer = styled.div`\n  display: \"flex\";\n  margin: 20px auto;\n  max-width: 80vw;\n`;\n\nconst SimpleTable = ({ titles, rows }) => {\n  return (\n    <Table style={{ width: \"100%\" }}>\n      <TableHead>\n        <TableRow>\n          {titles.map(title => (\n            <TableCell key={title}>{title}</TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => (\n          <TableRow key={row.join(\"-\")}>\n            {row.map((cell, i) => (\n              <TableCell key={i + \"\" + cell}>{cell}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nconst text2html = text =>\n  (text && linkifyUrls(text.replace(/\\n/gm, \"<br/>\"))) || \"\";\n\nconst MarketDetails = ({ details }) => (\n  <div\n    style={{ margin: 20, fontSize: \"0.85em\" }}\n    dangerouslySetInnerHTML={{ __html: text2html(details) }}\n  />\n);\n\nconst getMaxOutcome = outcomes =>\n  outcomes.map(outcome => outcome.price).sort()[outcomes.length - 1];\n\nconst Market = ({\n  category,\n  classes,\n  id,\n  description,\n  openInterest,\n  settlementFee,\n  volume,\n  marketType,\n  outcomes,\n  endTime,\n  details,\n  tags,\n  reportingState\n}) => (\n  <Card style={{ margin: 10 }}>\n    <CardHeader\n      title={description}\n      subheader={category}\n      titleTypographyProps={{ variant: \"h6\" }}\n      subheaderTypographyProps={{ align: \"left\" }}\n      action={true ? <StarIcon style={{ cursor: \"pointer\" }} /> : null}\n      className={classes.cardHeader}\n    />\n    <CardContent>\n      {marketType === \"yesNo\" && <Outcome price={getMaxOutcome(outcomes)} />}\n      <Typography variant=\"subtitle1\" align=\"left\" key={id}>\n        <MarketDetails details={details} />\n        <SimpleTable\n          titles={[\"volume\", \"eth open interest\", \"eth est. fee\", \"expires\"]}\n          rows={[\n            [\n              volume,\n              openInterest,\n              settlementFee * 100 + \"%\",\n              distanceInWordsStrict(new Date(), new Date(endTime * 1000), {\n                addSuffix: true,\n                unit: \"d\"\n              })\n            ]\n          ]}\n        />\n      </Typography>\n    </CardContent>\n    <CardActions className={classes.cardActions}>\n      {(reportingState === \"FINALIZED\" && (\n        <div style={{ textAlign: \"center\", width: \"100%\" }}>\n          <Chip icon={<CloseIcon />} label=\"FINALIZED\" />\n        </div>\n      )) || (\n        <Grid\n          container\n          spacing={1}\n          style={{ margin: 10 }}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\">\n              Will Happen\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"secondary\">\n              Will Not Happen\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n    </CardActions>\n  </Card>\n);\n\nconst MarketStyle = withStyles(styles)(Market);\n\nconst smallify = num => parseInt(num * 100, 10) / 100;\n\nconst MarketBet = () => {\n  const [bet, setBet] = useState(0);\n  const price = 0.42;\n  const oddsTrue = 0.42;\n  const oddsFalse = 1 - oddsTrue;\n  const payoutTrue = bet / oddsTrue;\n  const payoutFalse = bet / oddsFalse;\n  return (\n    <Grid container direction=\"column\" style={{ flexGrow: 1 }}>\n      <Grid item>\n        <TextField\n          type=\"number\"\n          label=\"Bet amount\"\n          min=\"0\"\n          onChange={e => setBet(e.target.value)}\n        />\n      </Grid>\n      <Grid container item direction=\"row\" style={{ flexGrow: 1 }}>\n        <Grid item xs={6} container direction=\"column\">\n          <Grid item>Odds : {smallify(oddsTrue)} %</Grid>\n          <Grid item>Payout : {smallify(payoutTrue)}</Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\">\n              Vuln\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid item xs={6} container direction=\"column\">\n          <Grid item>Odds : {smallify(oddsFalse)} %</Grid>\n          <Grid item>Payout : {smallify(payoutFalse)}</Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"secondary\">\n              NOT Vuln\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst Markets = ({ markets }) => (\n  <MarketsContainer>\n    {markets.map(market => (\n      <React.Fragment key={market.id}>\n        <MarketBet {...market} />\n\n        <MarketStyle {...market} />\n      </React.Fragment>\n    ))}\n  </MarketsContainer>\n);\n\nconst Layout = ({ classes, children }) => (\n  <React.Fragment>\n    <CssBaseline />\n    <AppBar position=\"static\" color=\"default\" className={classes.appBar}>\n      <Toolbar>\n        <Typography\n          variant=\"h6\"\n          color=\"inherit\"\n          noWrap\n          className={classes.toolbarTitle}\n        >\n          BetBug\n        </Typography>\n        <Button>Features</Button>\n        <Button>Enterprise</Button>\n        <Button>Support</Button>\n        <Button color=\"primary\" variant=\"outlined\">\n          Login\n        </Button>\n      </Toolbar>\n    </AppBar>\n    <main className={classes.layout}>{children}</main>\n  </React.Fragment>\n);\n\nconst Hero = ({ classes }) => (\n  <div className={classes.heroContent}>\n    <Typography\n      component=\"h1\"\n      variant=\"h2\"\n      align=\"center\"\n      color=\"textPrimary\"\n      gutterBottom\n    >\n      BetBug\n    </Typography>\n    <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" component=\"p\">\n      The bounty-driven security community\n    </Typography>\n  </div>\n);\n\nconst Index = props => {\n  const { classes } = props;\n\n  return (\n    <Layout classes={classes}>\n      <Hero classes={classes} />\n      <Grid container spacing={1} alignItems=\"flex-end\">\n        <MarketsSearch />\n      </Grid>\n    </Layout>\n  );\n};\n\nIndex.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Index);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}